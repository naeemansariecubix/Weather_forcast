# Your workflow name.
name: Deploy to heroku.

# Run workflow on every push to main branch.
on:
  push:
    branches: [main]

# Your workflows jobs.
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Check-out your repository.
      - name: Checkout
        uses: actions/checkout@v2


### ⬇ IMPORTANT PART ⬇ ###

      - name: Build, Push and Release a Docker container to Heroku. # Your custom step name
        uses: gonuit/heroku-docker-deploy@v1.3.3 # GitHub action name (leave it as it is).
        with:
          # Below you must provide variables for your Heroku app.

          # The email address associated with your Heroku account.
          # If you don't want to use repository secrets (which is recommended) you can do:
          # email: my.email@example.com
          email: ${{ secrets.HEROKU_EMAIL }}
          
          # Heroku API key associated with provided user's email.
          # Api Key is available under your Heroku account settings.
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          
          # Name of the heroku application to which the build is to be sent.
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}

          # (Optional, default: "./")
          # Dockerfile directory.
          # For example, if you have a Dockerfile in the root of your project, leave it as follows:
          dockerfile_directory: ./

          # (Optional, default: "Dockerfile")
          # Dockerfile name.
          dockerfile_name: Dockerfile

          # (Optional, default: "")
          # Additional options of docker build command.
          docker_options: "--no-cache"

          # (Optional, default: "web")
          # Select the process type for which you want the docker container to be uploaded.
          # By default, this argument is set to "web".
          # For more information look at https://devcenter.heroku.com/articles/process-model
          process_type: web
          
   
          
### ⬆ IMPORTANT PART ⬆ ###









# # Workflow name
# name: Run and expose app with ngrok

# # Trigger workflow on push to the main branch
# on:
#   push:
#     branches: [main]

# # Define jobs
# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       # Step 1: Check out the repository
#       - name: Checkout repository
#         uses: actions/checkout@v2

#       # Step 2: Set up Python environment
#       - name: Set up Python
#         uses: actions/setup-python@v2
#         with:
#           python-version: 3.11

#       # Step 3: Install dependencies
#       - name: Install application dependencies
#         run: |
#           pip install -r requirements.txt

#       # Step 4: Start the application
#       - name: Start application
#         run: |
#           nohup python app.py &

#       # Step 5: Install ngrok
#       - name: Install ngrok
#         run: |
#           curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
#           echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list >/dev/null
#           sudo apt update && sudo apt install ngrok -y

#       # Step 6: Configure and run ngrok
#       - name: Expose application with ngrok
#         env:
#           NGROK_AUTHTOKEN: ${{ secrets.NGROK_AUTHTOKEN }}
#         run: |
#           ngrok config add-authtoken $NGROK_AUTHTOKEN
#           nohup ngrok http 8080 > /dev/null 2>&1 &
#           sleep 5
#           curl -s http://127.0.0.1:4040/api/tunnels | jq

#       # Step 7: Output ngrok URL
#       - name: Display ngrok public URL
#         run: |
#           curl -s http://127.0.0.1:4040/api/tunnels | jq '.tunnels[0].public_url'

          
   
          
# ### ⬆ IMPORTANT PART ⬆ ###



# name: Python CI/CD Pipeline

# # Trigger the workflow on push or pull request to the main branch
# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - develop

# jobs:
#   build-and-deploy:
#     runs-on: ubuntu-latest

#     steps:
#     # Step 1: Checkout the repository
#     - name: Checkout code
#       uses: actions/checkout@v3

#     # Step 2: Set up Python
#     - name: Set up Python
#       uses: actions/setup-python@v4
#       with:
#         python-version: '3.11'  # Specify your Python version

#     # Step 3: Install dependencies
#     - name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install -r requirements.txt


#     # Step 4: Install Node.js and Localtunnel
#     - name: Install Node.js and Localtunnel
#       uses: actions/setup-node@v3
#       with:
#         node-version: '16'  # Compatible Node.js version
#     - run: npm install -g localtunnel

#     # Step 5: Start Flask App in the background
#     - name: Start Flask App
#       run: |
#         nohup python app.py &  # Start the Flask app
#         sleep 15               # Wait for the app to fully start

#     # Step 6: Expose Flask App using Localtunnel
#     - name: Expose Flask App
#       run: |
#         lt --port 8080 --subdomain flaskci > lt_url.txt &
#         sleep 5  # Wait for Localtunnel to initialize

#     # Step 7: Capture and Display the Public URL
#     - name: Display Public URL
#       run: |
#         PUBLIC_URL=$(cat lt_url.txt | grep -o 'http[s]\?://[^ ]*')  # Extract URL
#         echo "Flask App is publicly accessible at: $PUBLIC_URL"
